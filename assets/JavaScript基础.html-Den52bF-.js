import{_ as s,r as a,o as e,c as l,b as d,e as t}from"./app-DMBueewi.js";const n={},r=t(`<h2 id="javascript是什么" tabindex="-1"><a class="header-anchor" href="#javascript是什么"><span>JavaScript是什么？</span></a></h2><div class="hint-container important"><p class="hint-container-title">重要</p><p>JavaScript是一种跨平台、面向对象的脚本语言，用于控制网页的行为。</p></div><h3 id="它在web开发中的作用" tabindex="-1"><a class="header-anchor" href="#它在web开发中的作用"><span>它在Web开发中的作用</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>与HTML负责网页结构，CSS负责表现样式不同，JavaScript允许开发者实现网页与用户的交互功能，例如动态切换网页主题或响应用户操作。它是通过解释器直接执行源代码，无需编译阶段，极大地简化了开发过程。</p></div><h3 id="js如何与html和css协同工作" tabindex="-1"><a class="header-anchor" href="#js如何与html和css协同工作"><span>JS如何与HTML和CSS协同工作？</span></a></h3><ul><li><p>JavaScript通常嵌入到HTML文档中，通过编写并加载JavaScript代码来改变DOM元素状态（如修改元素属性、添加或删除子元素等），从而实现网页内容的实时更新。</p></li><li><p>此外，尽管JavaScript与Java名称相近且某些语法相似，但它们是独立的不同语言，JavaScript遵循ECMAScript标准进行编写。</p></li></ul><h3 id="特点" tabindex="-1"><a class="header-anchor" href="#特点"><span>特点</span></a></h3><ul><li>跨平台性</li><li>面向对象</li><li>脚本化运行</li><li>用于用户界面交互</li></ul><h3 id="js与java的联系与区别" tabindex="-1"><a class="header-anchor" href="#js与java的联系与区别"><span>JS与Java的联系与区别</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>尽管两者名字相似，但JavaScript与Java并非同一类语言。</li><li>JavaScript是基于ECMAScript标准的一种轻量级脚本语言，</li><li>而Java则是更底层的编程语言，涉及编译和虚拟机运行。</li><li>不过，它们在概念设计上有相似之处，都支持变量定义、条件判断、循环结构等基础语法。</li><li>然而，JavaScript作为一门用于控制网页行为的脚本语言，更强调简洁高效的编程方式，以及与HTML和CSS的紧密结合。</li></ul></div><h2 id="引入方式" tabindex="-1"><a class="header-anchor" href="#引入方式"><span>引入方式</span></a></h2><h3 id="_1-内部脚本" tabindex="-1"><a class="header-anchor" href="#_1-内部脚本"><span>1. 内部脚本</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>将JS代码定义在HTML页面中</p></div><ul><li><p>JavaScript代码必须位于<code>&lt;script&gt;&lt;/script&gt;</code>标签之间</p></li><li><p>JavaScript代码必须位于标签之间 在HTML文档中，可以在任意地方，放置任意数量的<code>&lt;script&gt;</code></p></li><li><p>一般会把脚本置于<code>&lt;body&gt;</code>元素的底部，可改善显示速度</p></li></ul><p>例子：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	alert(&quot;HELLO JAVASCRIPT&quot;);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-外部脚本" tabindex="-1"><a class="header-anchor" href="#_2-外部脚本"><span>2. 外部脚本</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>JS代码定义在外部JS文件中，然后引入到HTML页面中</p></div><ul><li>外部JS文件中，只包含JS代码，不包含<code>&lt;script&gt;&lt;/script&gt;</code>标签</li><li>引入外部js的<code>&lt;script&gt;</code>标签，必须是双标签</li></ul><p>例子：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> src</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;js/demo.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="hint-container important"><p class="hint-container-title">重要</p><p>注意外部引入的JS文件中不能包含<code>script</code>标签！</p></div><h2 id="基础语法" tabindex="-1"><a class="header-anchor" href="#基础语法"><span>基础语法</span></a></h2><h3 id="_1-书写语法" tabindex="-1"><a class="header-anchor" href="#_1-书写语法"><span>1. 书写语法</span></a></h3><ul><li><p>大小写严格</p></li><li><p>结尾分号可有可无（建议加上）</p></li><li><p>大括号代表代码块</p></li><li><p>注释：</p><ul><li>单行注释：<code>// 注释内容</code></li><li>多行注释：<code>/* 注释内容 */</code></li></ul></li><li><p>3中输出语法</p></li></ul><table><thead><tr><th>api</th><th>描述</th></tr></thead><tbody><tr><td><code>window.alert()</code></td><td>警告框</td></tr><tr><td><code>document.write()</code></td><td>在HTML中输入内容</td></tr><tr><td><code>console.log()</code></td><td>在浏览器控制台输出</td></tr></tbody></table><h3 id="_2-变量" tabindex="-1"><a class="header-anchor" href="#_2-变量"><span>2. 变量</span></a></h3><ol><li><strong>声明变量</strong>：使用关键字<code>var</code>，<code>let</code>或<code>const</code>来声明变量</li></ol><table><thead><tr><th>关键字</th><th>描述</th></tr></thead><tbody><tr><td><code>var</code></td><td>ES5及之前版本中使用的变量声明方式，其作用域为函数作用域或全局作用域，可以被重新赋值。</td></tr><tr><td><code>let</code></td><td>ES6引入的，提供了块级作用域（在花括号 <code>{}</code> 内），可以被重新赋值</td></tr><tr><td><code>const</code></td><td>ES6引入的，同样提供块级作用域，但它声明的变量是常量，一旦赋值后不能被重新赋值。</td></tr></tbody></table><ul><li>JS是一门弱类型语言，变量可以存放不同类型的值</li></ul><ol start="2"><li><p><strong>命名规则</strong>：</p><ul><li><p>变量名必须以字母、下划线 <code>_</code> 或美元符号 <code>$</code> 开头。</p></li><li><p>变量名可以包含字母、数字、下划线和美元符号，但不能使用空格。</p></li><li><p>数字不能作为开头</p></li><li><p>变量名是区分大小写的。</p></li></ul></li></ol><h3 id="_3-数据类型" tabindex="-1"><a class="header-anchor" href="#_3-数据类型"><span>3. 数据类型</span></a></h3><ul><li><p>原始类型：Undefined、Null、Boolean、Number、BigInt、Symbol 和 String。</p></li><li><p>引用类型：Object、Array、Function 等。</p></li></ul><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>number</td><td>数字（整数、小数、NaN）</td></tr><tr><td>string</td><td>字符串</td></tr><tr><td>boolean</td><td>布尔：true、false</td></tr><tr><td>null</td><td>空</td></tr><tr><td>undefined</td><td>当声明变量未初始化时，该变量默认值为undefined</td></tr></tbody></table><ul><li>使用<code>typeof</code>函数可以返回变量的数据类型。</li></ul><h3 id="_4-运算符" tabindex="-1"><a class="header-anchor" href="#_4-运算符"><span>4. 运算符</span></a></h3><table><thead><tr><th>类别</th><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>赋值运算符</td><td>=</td><td>赋值</td></tr><tr><td></td><td>+=</td><td>加法赋值</td></tr><tr><td></td><td>-=</td><td>减法赋值</td></tr><tr><td></td><td>*=</td><td>乘法赋值</td></tr><tr><td></td><td>/=</td><td>除法赋值</td></tr><tr><td></td><td>%=</td><td>取余赋值（求模）</td></tr><tr><td></td><td>**=</td><td>幂运算赋值</td></tr><tr><td>算术运算符</td><td>+</td><td>加法</td></tr><tr><td></td><td>-</td><td>减法</td></tr><tr><td></td><td>*</td><td>乘法</td></tr><tr><td></td><td>/</td><td>除法</td></tr><tr><td></td><td>%</td><td>取余（求模）</td></tr><tr><td></td><td>++</td><td>递增</td></tr><tr><td></td><td>--</td><td>递减</td></tr><tr><td>比较运算符</td><td>==</td><td>等于（类型转换后比较）</td></tr><tr><td></td><td>===</td><td>严格等于（不进行类型转换）</td></tr><tr><td></td><td>!=</td><td>不等于（类型转换后比较）</td></tr><tr><td></td><td>!==</td><td>严格不等于（不进行类型转换）</td></tr><tr><td></td><td>&gt;</td><td>大于</td></tr><tr><td></td><td>&lt;</td><td>小于</td></tr><tr><td></td><td>&gt;=</td><td>大于等于</td></tr><tr><td></td><td>&lt;=</td><td>小于等于</td></tr><tr><td>逻辑运算符</td><td>&amp;&amp;</td><td>逻辑与</td></tr><tr><td></td><td>||</td><td>逻辑或</td></tr><tr><td></td><td>!</td><td>逻辑非</td></tr><tr><td>位运算符</td><td>&amp;</td><td>位与</td></tr><tr><td></td><td>|</td><td>位或</td></tr><tr><td></td><td>^</td><td>位异或</td></tr><tr><td></td><td>~</td><td>位非</td></tr><tr><td></td><td>&lt;&lt;</td><td>左移</td></tr><tr><td></td><td>&gt;&gt;</td><td>右移</td></tr><tr><td></td><td>&gt;&gt;&gt;</td><td>无符号右移</td></tr><tr><td>条件运算符</td><td>? :</td><td>条件表达式（三元运算符）</td></tr><tr><td>逗号运算符</td><td>,</td><td>逗号，用于分隔表达式，按顺序执行</td></tr></tbody></table><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h2><ol><li><p><strong>声明函数</strong>：可以使用函数声明或函数表达式来定义函数。</p><ul><li>声明函数： 使用<code>function</code>关键字后跟函数名和参数列表</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> myFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">param1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">param2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 函数体</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>函数表达式：将函数赋值给一个变量</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> myFunction</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">param1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">param2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 函数体</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><div class="hint-container tip"><p class="hint-container-title">提示</p><p>由于JS是弱类型语言</p><ul><li>形参不需要声明类型</li><li>返回值也不需要声明类型</li></ul></div><ol start="2"><li><p><strong>参数</strong>：函数可以接受一个或多个参数，这些参数在函数体内部作为局部变量。</p></li><li><p><strong>返回值</strong>：使用<code>return</code>语句从函数返回一个值。如果没有<code>return</code>语句，函数默认返回<code>undefined</code>。</p></li><li><p><strong>作用域</strong>：函数有自己的作用域，内部定义的变量在函数外部不可访问。</p></li><li><p><strong>递归</strong>：函数可以调用自身，这称为递归。递归是解决某些问题（如算法中的树遍历）的有效方式。</p></li><li><p><strong>闭包</strong>：函数可以记住并访问创建时的作用域，即使该作用域已经执行完毕，这种现象称为闭包。</p></li><li><p><strong>高阶函数</strong>：JavaScript允许将函数作为参数传递给其他函数，或者将函数作为值赋给变量，这种函数称为高阶函数。</p></li><li><p><strong>箭头函数</strong>：ES6引入了更简洁的函数书写方式，称为箭头函数。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> myFunction</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">param1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">param2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 函数体</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>箭头函数还有一个更简洁的形式，当函数体只有一条语句时，可以省略花括号和<code>return</code>关键字：</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> myFunction</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">param1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">param2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> expression</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>默认参数</strong>：ES6允许为函数参数设置默认值。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> myFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">param1</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;default value&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 如果没有提供param1，它将使用默认值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>剩余参数</strong>：可以使用剩余参数语法来表示函数的不定数量的参数。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> myFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // args是一个包含所有传入参数的数组</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>this关键字</strong>：在函数中，<code>this</code>关键字指向函数运行时的上下文对象。在不同的调用方式下，<code>this</code>的值可能不同。</p></li><li><p><strong>立即调用的函数表达式（IIFE）</strong>：一个定义后立即执行的函数表达式，常用于创建一个新的作用域。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 代码块</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">})();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="js对象" tabindex="-1"><a class="header-anchor" href="#js对象"><span>JS对象</span></a></h2><p>大致分为三类：</p><ul><li>基本对象</li><li>BOM对象</li><li>DOM对象</li></ul><h3 id="参考手册" tabindex="-1"><a class="header-anchor" href="#参考手册"><span>参考手册</span></a></h3>`,45),h=t('<h3 id="基本对象" tabindex="-1"><a class="header-anchor" href="#基本对象"><span>基本对象</span></a></h3><p>JavaScript提供了许多内置的基本对象，这些对象是语言的核心组成部分，包括但不限于：</p><ul><li><strong><code>Object</code></strong>：所有对象的基类。</li><li><strong><code>String</code></strong>：表示文本数据。</li><li><strong><code>Number</code></strong>：表示数字。</li><li><strong><code>Boolean</code></strong>：表示逻辑实体“真”或“假”。</li><li><strong><code>Array</code></strong>：表示元素集合。</li><li><strong><code>Date</code></strong>：表示特定的时间点或时间段。</li><li><strong><code>RegExp</code></strong>：表示正则表达式。</li><li><strong><code>Math</code></strong>：提供数学运算功能。</li><li><strong><code>Error</code></strong>：表示错误信息。</li></ul><p>这些基本对象提供了大量的方法和属性，用于执行常见的操作，如字符串处理、数值计算、数组操作等。</p><ul><li>常用对象有：<code>Array</code>、<code>String</code>、<code>JSON</code></li></ul><h3 id="bom-浏览器对象模型" tabindex="-1"><a class="header-anchor" href="#bom-浏览器对象模型"><span>BOM（浏览器对象模型）</span></a></h3><p>BOM是浏览器提供的一个API，它允许JavaScript与浏览器交互。BOM的核心是<code>window</code>对象，它是所有浏览器全局对象的父对象。通过BOM，可以：</p><ul><li>操作浏览器窗口，如打开新窗口、改变窗口大小等。</li><li>访问浏览器的历史记录（<code>history</code>对象）。</li><li>与浏览器的导航功能交互（<code>location</code>对象）。</li><li>访问和操作浏览器的会话存储和本地存储。</li><li>响应浏览器事件，如点击、滚动等。</li></ul><p>BOM提供以下5个对象：</p><table><thead><tr><th>对象名称</th><th>描述</th></tr></thead><tbody><tr><td>Window</td><td>浏览器窗口对象</td></tr><tr><td>Navigator</td><td>浏览器对象</td></tr><tr><td>Screen</td><td>屏幕对象</td></tr><tr><td>History</td><td>历史记录对象</td></tr><tr><td>Location</td><td>地址栏对象</td></tr></tbody></table><h3 id="dom-文档对象模型" tabindex="-1"><a class="header-anchor" href="#dom-文档对象模型"><span>DOM（文档对象模型）</span></a></h3><p>DOM是HTML和XML文档的编程接口，它将文档的结构表示为一个节点树，每个节点对应文档中的一个对象。DOM允许JavaScript以编程方式访问和操作网页的元素和属性。主要特点包括：</p><ul><li><strong>节点层次结构</strong>：DOM将文档分解为元素节点、属性节点、文本节点等。</li><li><strong>元素访问</strong>：通过<code>document.getElementById</code>、<code>document.getElementsByTagName</code>、<code>document.querySelector</code>等方法访问元素。</li><li><strong>元素操作</strong>：可以修改元素的内容、属性、样式等。</li><li><strong>事件处理</strong>：可以为元素添加事件监听器，响应用户的交互。</li><li><strong>DOM操作</strong>：可以创建、删除、移动节点，从而动态地修改文档结构。</li></ul><p>获取DOM对象</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>document.getElementById</td><td>根据id属性值获取，返回单个Element对象</td></tr><tr><td>document.getElementByTagName</td><td>根据标签名称获取，返回Element对象数组</td></tr><tr><td>document.getElementsByName</td><td>根据name属性值获取，返回Element对象数组</td></tr><tr><td>document.getElementsByClassName</td><td>根据class属性值获取，返回Element对象数组</td></tr></tbody></table><ul><li>我们可以通过div标签对象的innerHTML属性来修改标签的内容</li></ul><h2 id="常见事件" tabindex="-1"><a class="header-anchor" href="#常见事件"><span>常见事件</span></a></h2><table><thead><tr><th>事件属性名</th><th>说明</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标单击事件</td></tr><tr><td>onblur</td><td>元素失去焦点</td></tr><tr><td>onfocus</td><td>元素获得焦点</td></tr><tr><td>onload</td><td>某个页面或图像被完成加载</td></tr><tr><td>onsubmit</td><td>当表单提交时触发该事件</td></tr><tr><td>onmouseover</td><td>鼠标被移到某元素之上</td></tr><tr><td>onmouseout</td><td>鼠标从某元素移开</td></tr></tbody></table>',18);function p(o,c){const i=a("NavCard");return e(),l("div",null,[r,d(i,{arr:`[
    {"title": "菜鸟教程", "url": "https://www.runoob.com/", "desc": "菜鸟在线教程", "icon": "/navicon/runoob.ico"},
    {"title": "W3C", "url": "https://www.w3cschool.cn/tutorial", "desc": "w3c在线基础教程", "icon": "/navicon/w3c.ico"}
]`}),h])}const g=s(n,[["render",p],["__file","JavaScript基础.html.vue"]]),u=JSON.parse('{"path":"/technology/frontend-dev/%E5%9F%BA%E7%A1%80%E6%8A%80%E6%9C%AF/JavaScript%E5%9F%BA%E7%A1%80.html","title":"JavaScript基础","lang":"zh-CN","frontmatter":{"title":"JavaScript基础","icon":"code","date":"2024-07-29T00:00:00.000Z","category":"前端基础","tags":["Web开发","JavaScript"],"cover":"/assets/images/JavaScript基础.jpg","order":"3","excerpt":"本篇文章将简单介绍一下Web前端开发中的JavaScript。包括其定义、在开发中的作用，与超文本标记语言和层叠样式表是如何协同工作的。","description":"JavaScript是什么？ 重要 JavaScript是一种跨平台、面向对象的脚本语言，用于控制网页的行为。 它在Web开发中的作用 提示 与HTML负责网页结构，CSS负责表现样式不同，JavaScript允许开发者实现网页与用户的交互功能，例如动态切换网页主题或响应用户操作。它是通过解释器直接执行源代码，无需编译阶段，极大地简化了开发过程。 JS...","head":[["meta",{"property":"og:url","content":"https://matike16.github.io/dadagarden.github.io/dadagarden.github.io/technology/frontend-dev/%E5%9F%BA%E7%A1%80%E6%8A%80%E6%9C%AF/JavaScript%E5%9F%BA%E7%A1%80.html"}],["meta",{"property":"og:site_name","content":"哒哒的花园"}],["meta",{"property":"og:title","content":"JavaScript基础"}],["meta",{"property":"og:description","content":"JavaScript是什么？ 重要 JavaScript是一种跨平台、面向对象的脚本语言，用于控制网页的行为。 它在Web开发中的作用 提示 与HTML负责网页结构，CSS负责表现样式不同，JavaScript允许开发者实现网页与用户的交互功能，例如动态切换网页主题或响应用户操作。它是通过解释器直接执行源代码，无需编译阶段，极大地简化了开发过程。 JS..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://matike16.github.io/dadagarden.github.io/dadagarden.github.io/assets/images/JavaScript基础.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-02T02:35:33.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://matike16.github.io/dadagarden.github.io/dadagarden.github.io/assets/images/JavaScript基础.jpg"}],["meta",{"name":"twitter:image:alt","content":"JavaScript基础"}],["meta",{"property":"article:author","content":"哒哒溜"}],["meta",{"property":"article:tag","content":"Web开发"}],["meta",{"property":"article:tag","content":"JavaScript"}],["meta",{"property":"article:published_time","content":"2024-07-29T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-02T02:35:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript基础\\",\\"image\\":[\\"https://matike16.github.io/dadagarden.github.io/dadagarden.github.io/assets/images/JavaScript基础.jpg\\"],\\"datePublished\\":\\"2024-07-29T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-02T02:35:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"哒哒溜\\",\\"url\\":\\"https://github.com/matike16\\"}]}"]]},"headers":[{"level":2,"title":"JavaScript是什么？","slug":"javascript是什么","link":"#javascript是什么","children":[{"level":3,"title":"它在Web开发中的作用","slug":"它在web开发中的作用","link":"#它在web开发中的作用","children":[]},{"level":3,"title":"JS如何与HTML和CSS协同工作？","slug":"js如何与html和css协同工作","link":"#js如何与html和css协同工作","children":[]},{"level":3,"title":"特点","slug":"特点","link":"#特点","children":[]},{"level":3,"title":"JS与Java的联系与区别","slug":"js与java的联系与区别","link":"#js与java的联系与区别","children":[]}]},{"level":2,"title":"引入方式","slug":"引入方式","link":"#引入方式","children":[{"level":3,"title":"1. 内部脚本","slug":"_1-内部脚本","link":"#_1-内部脚本","children":[]},{"level":3,"title":"2. 外部脚本","slug":"_2-外部脚本","link":"#_2-外部脚本","children":[]}]},{"level":2,"title":"基础语法","slug":"基础语法","link":"#基础语法","children":[{"level":3,"title":"1. 书写语法","slug":"_1-书写语法","link":"#_1-书写语法","children":[]},{"level":3,"title":"2. 变量","slug":"_2-变量","link":"#_2-变量","children":[]},{"level":3,"title":"3. 数据类型","slug":"_3-数据类型","link":"#_3-数据类型","children":[]},{"level":3,"title":"4. 运算符","slug":"_4-运算符","link":"#_4-运算符","children":[]}]},{"level":2,"title":"函数","slug":"函数","link":"#函数","children":[]},{"level":2,"title":"JS对象","slug":"js对象","link":"#js对象","children":[{"level":3,"title":"参考手册","slug":"参考手册","link":"#参考手册","children":[]},{"level":3,"title":"基本对象","slug":"基本对象","link":"#基本对象","children":[]},{"level":3,"title":"BOM（浏览器对象模型）","slug":"bom-浏览器对象模型","link":"#bom-浏览器对象模型","children":[]},{"level":3,"title":"DOM（文档对象模型）","slug":"dom-文档对象模型","link":"#dom-文档对象模型","children":[]}]},{"level":2,"title":"常见事件","slug":"常见事件","link":"#常见事件","children":[]}],"git":{"createdTime":1722255686000,"updatedTime":1722566133000,"contributors":[{"name":"matike16","email":"lda240820@gmail.com","commits":4}]},"readingTime":{"minutes":8.58,"words":2575},"filePathRelative":"technology/frontend-dev/基础技术/JavaScript基础.md","localizedDate":"2024年7月29日","autoDesc":true}');export{g as comp,u as data};
