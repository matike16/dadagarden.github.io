import{_ as i,o as s,c as a,e}from"./app-EOR-nAp7.js";const n={},t=e(`<h2 id="核心配置文件" tabindex="-1"><a class="header-anchor" href="#核心配置文件"><span>核心配置文件</span></a></h2><p><code>application.properties</code>和<code>application.yaml</code></p><h3 id="二者比较" tabindex="-1"><a class="header-anchor" href="#二者比较"><span>二者比较</span></a></h3><ol><li><p><strong>格式</strong>:</p><ul><li><code>application.properties</code>使用键值对的形式，每行一个属性，键和值之间用等号<code>=</code>或冒号<code>:</code>分隔。</li><li><code>application.yaml</code>使用YAML格式，支持层级结构和数据类型，如列表和对象。</li></ul></li><li><p><strong>可读性</strong>:</p><ul><li><code>application.yaml</code>由于其层级结构，可以更清晰地表示复杂的配置，对于大型配置文件来说，可读性更好。</li><li><code>application.properties</code>对于简单的配置，可读性也不错，但当配置变得复杂时，可读性会降低。</li></ul></li><li><p><strong>表达能力</strong>:</p><ul><li><code>application.yaml</code>支持数组和对象的嵌套，可以更灵活地表达配置结构。</li><li><code>application.properties</code>则需要使用特定的前缀来表示列表和嵌套结构，表达能力相对较弱。</li></ul></li><li><p><strong>语法</strong>:</p><ul><li><code>application.properties</code>的语法比较简单，但不支持注释中的换行符。</li><li><code>application.yaml</code>支持注释，并且可以使用<code>#</code>或<code>//</code>进行单行注释，使用<code>#</code>加三个连字符<code>---</code>进行多行注释。</li></ul></li><li><p><strong>数据类型</strong>:</p><ul><li><code>application.yaml</code>可以很容易地表示不同的数据类型，如整数、浮点数、布尔值和日期。</li><li><code>application.properties</code>通常将所有值视为字符串，需要显式转换为其他数据类型。</li></ul></li><li><p><strong>配置分离</strong>:</p><ul><li><code>application.yaml</code>可以很容易地通过文件分割来实现不同环境的配置分离。</li><li><code>application.properties</code>通常需要为每个环境创建不同的属性文件，如<code>application-dev.properties</code>。</li></ul></li><li><p><strong>Spring Boot支持</strong>:</p><ul><li>Spring Boot对这两种格式都有很好的支持，可以无缝切换。</li></ul></li><li><p><strong>使用场景</strong>:</p><ul><li>如果配置相对简单，<code>application.properties</code>可能是一个更简单的选择。</li><li>对于复杂的配置，或者需要更好的结构化和可读性，<code>application.yaml</code>可能是更好的选择。</li></ul></li></ol><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>application.properties配置文件由Spring Boot项目创建时，在resource文件夹下自动生成。</li><li>YAML文件格式是Spring Boot支持的一种JSON超集文件格式，相较于传统的Properties配置文件，YAML文件以数据为核心，是一种更为直观且容易被计算机识别的数据序列化格式。</li><li>二者工作原理一样，但是YAML更加简洁。</li></ul></div><h2 id="注解" tabindex="-1"><a class="header-anchor" href="#注解"><span>注解</span></a></h2><h3 id="component" tabindex="-1"><a class="header-anchor" href="#component"><span>@Component</span></a></h3><p>用于将一个类标记为Spring的组件。</p><ul><li>根本目的是让Spring Boot可以自动扫描到该组件，然后进行其他功能的实现</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>除了@Component实现标记一个类为组件外，还可以使用@Controller、@Service、@Repository、@Configuration等注解</p></div><h3 id="configurationproperties" tabindex="-1"><a class="header-anchor" href="#configurationproperties"><span>@ConfigurationProperties</span></a></h3><p>用于快速、方便地将配置文件中的自定义属性值批量注入某个Bean对象的多个对应的属性中。</p><ul><li>用于将外部配置（比如属性文件中的配置）绑定到一个组件的属性上。它允许你将配置文件中的属性映射到组件的字段上，从而实现配置的外部化。</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>使用@ConfigurationProperties批量注入属性值时，要保证配置文件中的属性与对应实体类的属性名一致，否则无法正确获取并注入属性值。</p></div><div class="hint-container important"><p class="hint-container-title">通俗解释</p><p>举个例子，假设你有一个配置文件application.properties，里面有这样的配置：</p><div class="language-application.properties line-numbers-mode" data-highlighter="shiki" data-ext="application.properties" data-title="application.properties" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>app.name=MyApp</span></span>
<span class="line"><span>app.version=1.0.0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以创建一个类，使用@ConfigurationProperties注解来自动将这些配置值注入到类的属性中：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> org.springframework.boot.context.properties.ConfigurationProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> org.springframework.stereotype.Component</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Component</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">ConfigurationProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">prefix</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> AppConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // getters and setters</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> setName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> version;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> setVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">version</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> version;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>@ConfigurationProperties(prefix=&quot;app&quot;)</code>告诉Spring Boot，去查找所有以”app.“为前缀的属性，并把它们注入到AppConfig类的相应属性中。这样，当你的应用程序启动时，AppConfig类的name和version属性就会自动被设置为”MyApp“和”1.0.0“。</p><p>简而言之，<code>@ConfigurationProperties</code>注解就像是一个快捷方式，让你能够轻松地将配置文件中的属性值映射到java对象中，而不需要手动编写代码来处理每个属性。</p></div><h3 id="value" tabindex="-1"><a class="header-anchor" href="#value"><span>@Value</span></a></h3><p>用于读取配置文件中的属性值并逐个注入Bean对象的对应属性中。</p><ul><li>用于注入字面值或对配置文件中的值进行表达式解析。它可以直接在字段上使用，Spring容器会解析这个字段的值，并将解析结果注入到相应的字段中。</li></ul><div class="hint-container tip"><p class="hint-container-title">@ConfigurationProperties和@Value比较</p><table><thead><tr><th style="text-align:center;">对比点</th><th style="text-align:center;">@ConfigurationProperties</th><th style="text-align:center;">@Value</th></tr></thead><tbody><tr><td style="text-align:center;">底层框架</td><td style="text-align:center;">Spring Boot</td><td style="text-align:center;">Spring</td></tr><tr><td style="text-align:center;">功能</td><td style="text-align:center;">批量注入配置文件中的属性</td><td style="text-align:center;">单个注入且可以添加对应对的值</td></tr><tr><td style="text-align:center;">setter方法</td><td style="text-align:center;">需要</td><td style="text-align:center;">不需要</td></tr><tr><td style="text-align:center;">复杂类型属性注入</td><td style="text-align:center;">支持</td><td style="text-align:center;">不支持</td></tr><tr><td style="text-align:center;">松散绑定</td><td style="text-align:center;">支持</td><td style="text-align:center;">不支持</td></tr><tr><td style="text-align:center;">JSR303数据校验</td><td style="text-align:center;">支持</td><td style="text-align:center;">不支持</td></tr><tr><td style="text-align:center;">SpEL表达式</td><td style="text-align:center;">不支持</td><td style="text-align:center;">支持</td></tr></tbody></table></div><h3 id="propertysource" tabindex="-1"><a class="header-anchor" href="#propertysource"><span>@PropertySource</span></a></h3><p>如果要加载自定义配置文件，可以使用@PropertySource和@Configuration注解实现。</p><ul><li>@PropertySource注解可以指定自定义配置文件的位置和名称</li><li>@Configuration注解可以将实体类指定为自定义配置类</li></ul><div class="hint-container important"><p class="hint-container-title">简而言之</p><p>简单来说，@PropertySource注解是一个方便的工具，它允许你告诉Spring框架除了默认的配置文件外，还应该加载哪些额外的配置文件。</p></div><h3 id="importresource" tabindex="-1"><a class="header-anchor" href="#importresource"><span>@ImportResource</span></a></h3><p>传统的Spring项目配置主要基于XML文件。Spring Boot框架在Spring 4.x基础上进行改进，默认不再使用XML文件配置项目，且XML配置文件不会加载到Spring容器中。如果希望将外部的XML文件加载到程序中，可以使用这个注解。</p><ul><li>用于导入XML配置文件到Spring的注解配置中。它允许你将XML配置和基于Java的配置结合起来使用。</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在Spring Boot开发中，“约定大于配置”的思想，更推荐使用配置类的方式代替XML配置。</p></div><h3 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration"><span>@Configuration</span></a></h3><p>@Configuration注解可以将实体类指定为自定义配置类</p><ul><li>这个注解标记一个类作为配置类，它允许你使用Java代码来定义bean。在配置类中，你可以使用@Bean注解来声明bean，也可以使用其他注解来导入其他配置类或组件。</li></ul><h3 id="profile多环境配置" tabindex="-1"><a class="header-anchor" href="#profile多环境配置"><span>Profile多环境配置</span></a></h3><h4 id="使用profile文件进行多环境配置" tabindex="-1"><a class="header-anchor" href="#使用profile文件进行多环境配置"><span>使用Profile文件进行多环境配置</span></a></h4><p>对应的配置文件：</p><ul><li>application-dev.properties：开发环境配置文件</li><li>application-test.properties：测试环境配置文件</li><li>application-prod.properties：生产环境配置文件</li></ul><p>控制台输入如下命令激活对应的环境：</p><div class="language-cmd line-numbers-mode" data-highlighter="shiki" data-ext="cmd" data-title="cmd" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">java</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">jar</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> xxx.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">jar</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> --</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">spring.profiles.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">active</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>也可以在全局中配置激活对应的环境：</p><div class="language-cmd line-numbers-mode" data-highlighter="shiki" data-ext="cmd" data-title="cmd" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">spring.profiles.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">active</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="使用-profile注解进行多环境配置" tabindex="-1"><a class="header-anchor" href="#使用-profile注解进行多环境配置"><span>使用@Profile注解进行多环境配置</span></a></h4><p>@Profile注解用于定义一个Bean的激活条件。当Spring容器启动时，它会检查@Profile注解指定的条件，如果条件满足，那么带有该注解的Bean就会注册到Spring容器中。</p><p>@Profile注解的基本用法如下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Profile</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> DevConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	// 配置只有在开发环境中才会使用的Bean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面例子中，只有当全局配置<code>spring.profiles.active</code>指定为dev时，DevConfig类才会被加载。</p><p>@Profile也可以用于指定多个激活配置，利用数组：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Profile</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">({</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> DevAndTestConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	// 配置在开发和测试环境都可以使用的Bean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@Profile注解是Spring框架中实现条件化Bean注册的强大工具，它允许开发者根据不同的运行环境或条件定制应用程序的行为。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>同时使用Profile文件和@Profile注解来进行多环境配置是可以的，二者之间不会相互干扰。</p></div><h2 id="随机值设置及参数间引用" tabindex="-1"><a class="header-anchor" href="#随机值设置及参数间引用"><span>随机值设置及参数间引用</span></a></h2><p>在Spring Boot配置文件中，可以使用随机值和参数见引用对属性值进行设置。</p><h3 id="随机值设置" tabindex="-1"><a class="header-anchor" href="#随机值设置"><span>随机值设置</span></a></h3><p>随机值设置使用到了Spring Boot内嵌的RandomValuePropertySource类，对一些隐秘属性值或者测试用例属性值进行随机值注入。</p><p>格式：</p><ul><li><code>\${random.xx}</code></li><li>xx表示需要指定生成的随机数类型和范围。</li></ul><p>示例：</p><div class="language-application.properties line-numbers-mode" data-highlighter="shiki" data-ext="application.properties" data-title="application.properties" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>//生成随机字符串</span></span>
<span class="line"><span>my.string=\${random.value}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//生成随机正数</span></span>
<span class="line"><span>my.number=\${random.int}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//生成随机long类型数</span></span>
<span class="line"><span>my.number=\${random.long}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//生成随机UUID类型数</span></span>
<span class="line"><span>my.number=\${random.uuid}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//配置小于10的随机整数</span></span>
<span class="line"><span>my.number.less.than.ten=\${random.int(10)}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//配置范围在[1024,65536]之间的随机整数</span></span>
<span class="line"><span>my.number.in.range=\${random.int[1024,65536]}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参数间引用" tabindex="-1"><a class="header-anchor" href="#参数间引用"><span>参数间引用</span></a></h3><p>在配置文件中，只需要对其中一处属性进行预先配置，其他地方都可以进行引用，节约了后续多处修改的麻烦。</p><p>格式：</p><ul><li><code>\${xx}</code></li><li>xx表示先前在配置文件中已经配置过的属性名。</li></ul><p>示例：</p><div class="language-application.properties line-numbers-mode" data-highlighter="shiki" data-ext="application.properties" data-title="application.properties" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>app.name=MyApp</span></span>
<span class="line"><span>app.description=\${app.name} is a Spring Boot application</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,61),l=[t];function p(r,h){return s(),a("div",null,l)}const o=i(n,[["render",p],["__file","Spring-Boot核心配置与注解.html.vue"]]),c=JSON.parse('{"path":"/technology/backend-dev/%E5%90%8E%E7%AB%AF%E6%A1%86%E6%9E%B6/Spring-Boot%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%B3%A8%E8%A7%A3.html","title":"SpringBoot核心配置与注解","lang":"zh-CN","frontmatter":{"title":"SpringBoot核心配置与注解","icon":"code","date":"2024-08-15T00:00:00.000Z","category":"后端框架","tags":["SpringBoot","Web开发"],"cover":"/assets/images/Spring-Boot原理分析.jpg","excerpt":"Spring Boot是一个基于Spring框架的快速开发工具，它提供了大量的自动配置、简化的依赖管理和监控功能，使得开发者可以快速构建基于Spring的应用。","order":"2","description":"核心配置文件 application.properties和application.yaml 二者比较 格式: application.properties使用键值对的形式，每行一个属性，键和值之间用等号=或冒号:分隔。 application.yaml使用YAML格式，支持层级结构和数据类型，如列表和对象。 可读性: application.yaml...","head":[["meta",{"property":"og:url","content":"https://matike16.github.io/dadagarden.github.io/dadagarden.github.io/technology/backend-dev/%E5%90%8E%E7%AB%AF%E6%A1%86%E6%9E%B6/Spring-Boot%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%B3%A8%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"哒哒的花园"}],["meta",{"property":"og:title","content":"SpringBoot核心配置与注解"}],["meta",{"property":"og:description","content":"核心配置文件 application.properties和application.yaml 二者比较 格式: application.properties使用键值对的形式，每行一个属性，键和值之间用等号=或冒号:分隔。 application.yaml使用YAML格式，支持层级结构和数据类型，如列表和对象。 可读性: application.yaml..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://matike16.github.io/dadagarden.github.io/dadagarden.github.io/assets/images/Spring-Boot原理分析.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-01T01:11:14.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://matike16.github.io/dadagarden.github.io/dadagarden.github.io/assets/images/Spring-Boot原理分析.jpg"}],["meta",{"name":"twitter:image:alt","content":"SpringBoot核心配置与注解"}],["meta",{"property":"article:author","content":"哒哒溜"}],["meta",{"property":"article:tag","content":"SpringBoot"}],["meta",{"property":"article:tag","content":"Web开发"}],["meta",{"property":"article:published_time","content":"2024-08-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-01T01:11:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringBoot核心配置与注解\\",\\"image\\":[\\"https://matike16.github.io/dadagarden.github.io/dadagarden.github.io/assets/images/Spring-Boot原理分析.jpg\\"],\\"datePublished\\":\\"2024-08-15T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-01T01:11:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"哒哒溜\\",\\"url\\":\\"https://github.com/matike16\\"}]}"]]},"headers":[{"level":2,"title":"核心配置文件","slug":"核心配置文件","link":"#核心配置文件","children":[{"level":3,"title":"二者比较","slug":"二者比较","link":"#二者比较","children":[]}]},{"level":2,"title":"注解","slug":"注解","link":"#注解","children":[{"level":3,"title":"@Component","slug":"component","link":"#component","children":[]},{"level":3,"title":"@ConfigurationProperties","slug":"configurationproperties","link":"#configurationproperties","children":[]},{"level":3,"title":"@Value","slug":"value","link":"#value","children":[]},{"level":3,"title":"@PropertySource","slug":"propertysource","link":"#propertysource","children":[]},{"level":3,"title":"@ImportResource","slug":"importresource","link":"#importresource","children":[]},{"level":3,"title":"@Configuration","slug":"configuration","link":"#configuration","children":[]},{"level":3,"title":"Profile多环境配置","slug":"profile多环境配置","link":"#profile多环境配置","children":[]}]},{"level":2,"title":"随机值设置及参数间引用","slug":"随机值设置及参数间引用","link":"#随机值设置及参数间引用","children":[{"level":3,"title":"随机值设置","slug":"随机值设置","link":"#随机值设置","children":[]},{"level":3,"title":"参数间引用","slug":"参数间引用","link":"#参数间引用","children":[]}]}],"git":{"createdTime":1723687670000,"updatedTime":1725153074000,"contributors":[{"name":"matike16","email":"lda240820@gmail.com","commits":5}]},"readingTime":{"minutes":7.49,"words":2247},"filePathRelative":"technology/backend-dev/后端框架/Spring-Boot核心配置与注解.md","localizedDate":"2024年8月15日","autoDesc":true}');export{o as comp,c as data};
