import{_ as e,o as t,c as i,e as a}from"./app-Cf1X4KET.js";const l={},o=a('<p>前端模板引擎的出现，使前端开发人员无须关注后端业务的具体实现，只关注自己页面的呈现效果即可，从而解决了前端代码错综复杂的问题，实现了前后端分离开发。</p><h2 id="什么是模板引擎" tabindex="-1"><a class="header-anchor" href="#什么是模板引擎"><span>什么是模板引擎？</span></a></h2><ul><li>模板引擎用于将数据和定义好的模板相结合，生成最终的文档和页面。</li><li>使用占位符等特殊语法，将数据动态注入到预设的UI模板中，生成最终的HTML页面。</li></ul><h3 id="spring-boot-支持的视图技术" tabindex="-1"><a class="header-anchor" href="#spring-boot-支持的视图技术"><span>Spring Boot 支持的视图技术</span></a></h3><ul><li>FreeMarker</li><li>Groovy</li><li>Thymeleaf</li><li>Mustache</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>以上模板引擎不做过多介绍，各有所长</p></div><div class="hint-container important"><p class="hint-container-title">重要</p><p>Spring Boot 不太支持常用的JSP模板，并且没有提供对应的整合配置，这是因为使用嵌入式Servlet容器的Spring Boot应用程序对于JSP模板存在一些限制。</p></div><h3 id="thymeleaf和vue3的区别" tabindex="-1"><a class="header-anchor" href="#thymeleaf和vue3的区别"><span>Thymeleaf和Vue3的区别</span></a></h3><h4 id="用途" tabindex="-1"><a class="header-anchor" href="#用途"><span>用途</span></a></h4><ul><li><p>Thymeleaf：</p><ul><li>主要用于服务端模板引擎，用于在服务器端渲染HTML页面。</li><li>适用于需要在服务器端生成完整HTML页面的场景</li></ul></li><li><p>Vue3：</p><ul><li>一个前端JS框架，用于构建客户端的单页面程序（SPA）</li><li>专注于前端交互和动态内容更新</li><li>设用于需要高度动态内容和丰富用户交互的应用程序。</li></ul></li></ul><h4 id="渲染位置" tabindex="-1"><a class="header-anchor" href="#渲染位置"><span>渲染位置</span></a></h4><ul><li><p>Thymeleaf：</p><ul><li>在服务端渲染，生成完整的HTML页面，然后发送到客户端</li><li>适用于SEO友好的页面</li></ul></li><li><p>Vue3：</p><ul><li>主要在客户端渲染，通过JS动态添加内容和交互</li><li>可以结合服务器渲染或静态站点生成来提高SEO性能，但默认情况是在客户端渲染</li></ul></li></ul><h4 id="性能考虑" tabindex="-1"><a class="header-anchor" href="#性能考虑"><span>性能考虑</span></a></h4><ul><li><p>Thymeleaf：</p><ul><li>服务器端渲染可能会增加服务器负载，但可以提供更快的内容呈现</li></ul></li><li><p>Vue3：</p><ul><li>客户端渲染可能带来更好的交互体验，但需要更多的客户端资源</li></ul></li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>选择Thymeleaf还是Vue3来进行Spring Boot视图界面的开发，主要看具体需求和团队偏好。</p><ul><li>Thymeleaf更适合传统的服务器渲染应用和需要快速加载页面且交互性不强的场景。</li><li>Vue 3更适合构建现代化的单页面应用程序和需要高度动态和交互性的页面。</li></ul><p>面对当下的市场需求，面向客户端渲染的Web应用越来越多，一般优先考虑Vue3；若渲染需求较大，则建议采用服务器端渲染的方式，再将结果返回给用户界面。</p></div><h4 id="前后端分离性" tabindex="-1"><a class="header-anchor" href="#前后端分离性"><span>前后端分离性</span></a></h4><ul><li><p>Thymeleaf：</p><ul><li>较弱</li></ul></li><li><p>Vue3：</p><ul><li>更优</li></ul></li></ul>',17),n=[o];function r(p,s){return t(),i("div",null,n)}const h=e(l,[["render",r],["__file","Spring-Boot视图技术.html.vue"]]),d=JSON.parse('{"path":"/technology/backend-dev/%E5%90%8E%E7%AB%AF%E6%A1%86%E6%9E%B6/Spring-Boot%E8%A7%86%E5%9B%BE%E6%8A%80%E6%9C%AF.html","title":"SpringBoot视图技术","lang":"zh-CN","frontmatter":{"title":"SpringBoot视图技术","icon":"code","date":"2024-09-15T00:00:00.000Z","category":"后端框架","tags":["SpringBoot","Web开发","Thymeleaf"],"cover":"/assets/images/Spring-Boot原理分析.jpg","excerpt":"在一个Web应用中，通常会采用MVC设计模式实现对应的模型、视图和控制器，其中，视图是用户看到并与之交互的界面。对最初的Web应用来说，视图是由HTML元素组成的静态界面；而后期的Web应用更倾向于使用动态模板技术，从而实现前后端分离和页面的动态数据展示。","order":"4","description":"前端模板引擎的出现，使前端开发人员无须关注后端业务的具体实现，只关注自己页面的呈现效果即可，从而解决了前端代码错综复杂的问题，实现了前后端分离开发。 什么是模板引擎？ 模板引擎用于将数据和定义好的模板相结合，生成最终的文档和页面。 使用占位符等特殊语法，将数据动态注入到预设的UI模板中，生成最终的HTML页面。 Spring Boot 支持的视图技术 ...","head":[["meta",{"property":"og:url","content":"https://matike16.github.io/dadagarden.github.io/dadagarden.github.io/technology/backend-dev/%E5%90%8E%E7%AB%AF%E6%A1%86%E6%9E%B6/Spring-Boot%E8%A7%86%E5%9B%BE%E6%8A%80%E6%9C%AF.html"}],["meta",{"property":"og:site_name","content":"哒哒的花园"}],["meta",{"property":"og:title","content":"SpringBoot视图技术"}],["meta",{"property":"og:description","content":"前端模板引擎的出现，使前端开发人员无须关注后端业务的具体实现，只关注自己页面的呈现效果即可，从而解决了前端代码错综复杂的问题，实现了前后端分离开发。 什么是模板引擎？ 模板引擎用于将数据和定义好的模板相结合，生成最终的文档和页面。 使用占位符等特殊语法，将数据动态注入到预设的UI模板中，生成最终的HTML页面。 Spring Boot 支持的视图技术 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://matike16.github.io/dadagarden.github.io/dadagarden.github.io/assets/images/Spring-Boot原理分析.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-24T08:40:17.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://matike16.github.io/dadagarden.github.io/dadagarden.github.io/assets/images/Spring-Boot原理分析.jpg"}],["meta",{"name":"twitter:image:alt","content":"SpringBoot视图技术"}],["meta",{"property":"article:author","content":"哒哒溜"}],["meta",{"property":"article:tag","content":"SpringBoot"}],["meta",{"property":"article:tag","content":"Web开发"}],["meta",{"property":"article:tag","content":"Thymeleaf"}],["meta",{"property":"article:published_time","content":"2024-09-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-24T08:40:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringBoot视图技术\\",\\"image\\":[\\"https://matike16.github.io/dadagarden.github.io/dadagarden.github.io/assets/images/Spring-Boot原理分析.jpg\\"],\\"datePublished\\":\\"2024-09-15T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-24T08:40:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"哒哒溜\\",\\"url\\":\\"https://github.com/matike16\\"}]}"]]},"headers":[{"level":2,"title":"什么是模板引擎？","slug":"什么是模板引擎","link":"#什么是模板引擎","children":[{"level":3,"title":"Spring Boot 支持的视图技术","slug":"spring-boot-支持的视图技术","link":"#spring-boot-支持的视图技术","children":[]},{"level":3,"title":"Thymeleaf和Vue3的区别","slug":"thymeleaf和vue3的区别","link":"#thymeleaf和vue3的区别","children":[]}]}],"git":{"createdTime":1726371954000,"updatedTime":1727167217000,"contributors":[{"name":"matike16","email":"lda240820@gmail.com","commits":3}]},"readingTime":{"minutes":2.66,"words":799},"filePathRelative":"technology/backend-dev/后端框架/Spring-Boot视图技术.md","localizedDate":"2024年9月15日","autoDesc":true}');export{h as comp,d as data};
