import{_ as o,o as t,c as e,e as i}from"./app-C-SEdTbB.js";const n="/dadagarden.github.io/assets/1-CVVy1ZWb.png",r="/dadagarden.github.io/assets/2-I3zk4a4A.png",a="/dadagarden.github.io/assets/3-BiTxw4uy.png",p="/dadagarden.github.io/assets/4-C-mRhvYm.png",c={},g=i('<p>传统的Spring框架实现一个Web项目，需要手动导入各类依赖包和编写对应的XML配置文件，而Spring Boot框架则更加高效、便利和快捷。</p><h2 id="spring-boot-依赖管理" tabindex="-1"><a class="header-anchor" href="#spring-boot-依赖管理"><span>Spring Boot 依赖管理</span></a></h2><h3 id="_1-spring-boot-starter-parent依赖" tabindex="-1"><a class="header-anchor" href="#_1-spring-boot-starter-parent依赖"><span>1. spring-boot-starter-parent依赖</span></a></h3><ul><li>spring-boot-starter-parent父依赖启动器的主要作用时进行版本统一管理。</li></ul><p>在<code>pom.xml</code>文件中，通过Ctrl+鼠标左键进入spring-boot-starter-parent下查看源文件，找到父依赖spring-boot-dependencies，接着继续进入，就可以看到该文件通过了<code>&lt;properties&gt;</code>标签对一些常用的技术框架的依赖文件进行了统一的版本控制，这就是为什么<code>pom.xml</code>引入依赖项不需要标注依赖文件版本号的原因。</p><ul><li>如果<code>pom.xml</code>引入的依赖文件不需要spring-boot-starter-parent管理，那么引入依赖时，必须通过<code>&lt;version&gt;</code>标签添加依赖版本号。</li></ul><figure><img src="'+n+'" alt="spring-boot-dependencies底层源文件" tabindex="0" loading="lazy"><figcaption>spring-boot-dependencies底层源文件</figcaption></figure><h3 id="_2-spring-boot-starter-web依赖" tabindex="-1"><a class="header-anchor" href="#_2-spring-boot-starter-web依赖"><span>2. spring-boot-starter-web依赖</span></a></h3><ul><li>spring-boot-starter-web依赖启动器的主要作用时提供Web开发场景所需要的底层所有依赖文件，它对Web开发场景所需的依赖文件进行了统一管理。</li></ul><figure><img src="'+r+'" alt="spring-boot-starter-web底层源文件" tabindex="0" loading="lazy"><figcaption>spring-boot-starter-web底层源文件</figcaption></figure><ul><li>通过spring-boot-starter-web依赖启动器就可以实现Web场景开发，不需要引入Tomcat服务器以及Web依赖文件等。这些依赖的版本号依然由spring-boot-starter-parent父依赖进行统一管理。</li></ul><div class="hint-container warning"><p class="hint-container-title">关于框架官方提供的依赖启动器与第三方</p><p>Spring Boot官方并不会对所有场景都提供依赖启动器，有些启动器是由第三方主动适配框架进行整合的，例如阿里巴巴的Druid数据源提供了druid-spring-boot-starter等，这些第三方依赖启动器的引入都需要在<code>pom.xml</code>文件中配置版本号。</p></div><h2 id="spring-boot-自动配置" tabindex="-1"><a class="header-anchor" href="#spring-boot-自动配置"><span>Spring Boot 自动配置</span></a></h2><p>Spring Boot应用的启动入口时<code>@SpringBootApplication</code>注解标注类中的<code>main()</code>方法，<code>@SpringBootApplication</code>能够扫描Spring组件并自动配置Spring Boot。</p><ul><li>进入<code>@SpringBootApplication</code>底层源码</li></ul><figure><img src="'+a+'" alt="进入@SpringBootApplication底层源码" tabindex="0" loading="lazy"><figcaption>进入@SpringBootApplication底层源码</figcaption></figure><p>下面是 <code>@SpringBootApplication</code> 底层源码中的三个核心注解及其作用：</p><h3 id="_1-springbootconfiguration" tabindex="-1"><a class="header-anchor" href="#_1-springbootconfiguration"><span>1. <strong><code>@SpringBootConfiguration</code></strong></span></a></h3><ul><li>这个注解表明当前类是一个 Spring Boot 配置类。它继承自 <code>@Configuration</code> 注解，意味着使用该注解的类可以包含 <code>@Bean</code> 方法，这些方法将被 Spring 容器管理，并可用于注入依赖项。</li><li><code>@SpringBootConfiguration</code>注解的作用与<code>@Configuration</code> 注解的作用相同，只不过<code>@SpringBootConfiguration</code>注解是被Spring Boot进行重新分装命名了而已。</li></ul><h3 id="_2-enableautoconfiguration" tabindex="-1"><a class="header-anchor" href="#_2-enableautoconfiguration"><span>2. <strong><code>@EnableAutoConfiguration</code></strong></span></a></h3><ul><li><code>@EnableAutoConfiguration</code> 注解告诉 Spring Boot 根据添加的 jar 依赖自动配置 Spring 应用程序。Spring Boot 会尝试根据类路径上的库来猜测你想如何配置 Spring 应用程序。例如，如果你添加了 <code>spring-boot-starter-web</code> 依赖，Spring Boot 会自动配置 Tomcat 和 Spring MVC。</li><li>该注解是表示开启自动配置功能，是实现自动化配置的注解。</li><li>该注解是一个组合注解，通过该注解的底层，我们要知道，在定义项目包结构时，一定要规范，项目主程序启动类要定义在最外层的根目录位置，然后在根目录位置内部建立子包和类进行业务开发，这样才能保证定义的类能够被组件扫描器扫描。</li></ul><h3 id="_3-componentscan" tabindex="-1"><a class="header-anchor" href="#_3-componentscan"><span>3. <strong><code>@ComponentScan</code></strong></span></a></h3><ul><li><code>@ComponentScan</code> 注解指示 Spring 在指定的包及其子包中搜索带有 <code>@Component</code>、<code>@Service</code>、<code>@Repository</code>、<code>@Controller</code> 等注解的类。这使得 Spring 能够自动检测并注册这些组件为 Spring 应用上下文中的 bean。</li><li>该注解是一个组件包扫描器，用于将指定包中的注解类自动装配到Spring的Bean容器中。</li></ul><p>这三个注解共同工作，提供了一个快速启动的 Spring 应用程序，其中 <code>@SpringBootConfiguration</code> 定义了配置类，<code>@EnableAutoConfiguration</code> 启用了自动配置，而 <code>@ComponentScan</code> 允许 Spring 扫描并注册组件。</p><h2 id="spring-boot执行流程" tabindex="-1"><a class="header-anchor" href="#spring-boot执行流程"><span>Spring Boot执行流程</span></a></h2><p>每个Spring Boot项目都有一个主程序启动类，在主程序启动类中有一个启动项目的<code>main()</code>方法，在该方法中，通过执行<code>SpringApplication.run()</code>即可启动整个Spring Boot程序。</p><p>查看run()方法底层源码：</p><figure><img src="'+p+'" alt="run()方法底层源码" tabindex="0" loading="lazy"><figcaption>run()方法底层源码</figcaption></figure><p><code>SpringApplication.run()</code> 方法内部执行了两个主要操作：</p><ol><li><p><strong>创建 Spring 应用上下文（ApplicationContext）</strong></p><ul><li><code>SpringApplication.run()</code> 方法首先会创建一个新的 <code>ApplicationContext</code> 实例。这个上下文是 Spring 框架的核心，用于管理所有的 Spring 组件（即 beans）。Spring 应用上下文可以是多种类型，例如 <code>AnnotationConfigApplicationContext</code>、<code>ClassPathXmlApplicationContext</code> 或 <code>FileSystemXmlApplicationContext</code> 等，具体取决于应用程序的配置方式。</li></ul></li><li><p><strong>运行 Spring 应用上下文并调用所有初始化回调</strong></p><ul><li>一旦创建了应用上下文，<code>SpringApplication.run()</code> 方法会调用 <code>ApplicationContext</code> 的 <code>run()</code> 方法。这个方法会触发 Spring 应用上下文的初始化过程，包括： <ul><li>调用所有实现了 <code>ApplicationContextInitializer</code> 接口的初始化器。</li><li>调用所有实现了 <code>ApplicationListener</code> 接口的监听器。</li><li>触发所有的 <code>@PostConstruct</code> 注解方法，这些方法在依赖注入完成后执行。</li><li>触发所有的 <code>@EventListener</code> 注解方法，这些方法用于监听应用程序事件。</li><li>触发 <code>ApplicationReadyEvent</code>，这表示应用程序已经准备好接收请求。</li></ul></li></ul></li></ol><p>此外，<code>SpringApplication.run()</code> 还负责处理命令行参数和配置文件，以及应用任何特定的配置类或自动配置。它还提供了一种机制来注册和使用自定义的事件监听器和初始化器。</p>',31),s=[g];function d(l,b){return t(),e("div",null,s)}const m=o(c,[["render",d],["__file","Spring-Boot原理分析.html.vue"]]),h=JSON.parse('{"path":"/technology/backend-dev/%E5%90%8E%E7%AB%AF%E6%A1%86%E6%9E%B6/Spring-Boot%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90.html","title":"SpringBoot原理分析","lang":"zh-CN","frontmatter":{"title":"SpringBoot原理分析","icon":"code","date":"2024-08-06T00:00:00.000Z","category":"后端框架","tags":["SpringBoot","Web开发"],"cover":"/assets/images/Spring-Boot原理分析.jpg","excerpt":"传统的Spring框架实现一个Web项目，需要手动导入各类依赖包和编写对应的XML配置文件，而Spring Boot框架则更加高效、便利和快捷。","order":"1","description":"传统的Spring框架实现一个Web项目，需要手动导入各类依赖包和编写对应的XML配置文件，而Spring Boot框架则更加高效、便利和快捷。 Spring Boot 依赖管理 1. spring-boot-starter-parent依赖 spring-boot-starter-parent父依赖启动器的主要作用时进行版本统一管理。 在pom.xm...","head":[["meta",{"property":"og:url","content":"https://matike16.github.io/dadagarden.github.io/dadagarden.github.io/technology/backend-dev/%E5%90%8E%E7%AB%AF%E6%A1%86%E6%9E%B6/Spring-Boot%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"哒哒的花园"}],["meta",{"property":"og:title","content":"SpringBoot原理分析"}],["meta",{"property":"og:description","content":"传统的Spring框架实现一个Web项目，需要手动导入各类依赖包和编写对应的XML配置文件，而Spring Boot框架则更加高效、便利和快捷。 Spring Boot 依赖管理 1. spring-boot-starter-parent依赖 spring-boot-starter-parent父依赖启动器的主要作用时进行版本统一管理。 在pom.xm..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://matike16.github.io/dadagarden.github.io/dadagarden.github.io/assets/images/Spring-Boot原理分析.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-31T04:05:57.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://matike16.github.io/dadagarden.github.io/dadagarden.github.io/assets/images/Spring-Boot原理分析.jpg"}],["meta",{"name":"twitter:image:alt","content":"SpringBoot原理分析"}],["meta",{"property":"article:author","content":"哒哒溜"}],["meta",{"property":"article:tag","content":"SpringBoot"}],["meta",{"property":"article:tag","content":"Web开发"}],["meta",{"property":"article:published_time","content":"2024-08-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-31T04:05:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringBoot原理分析\\",\\"image\\":[\\"https://matike16.github.io/dadagarden.github.io/dadagarden.github.io/assets/images/Spring-Boot原理分析.jpg\\"],\\"datePublished\\":\\"2024-08-06T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-31T04:05:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"哒哒溜\\",\\"url\\":\\"https://github.com/matike16\\"}]}"]]},"headers":[{"level":2,"title":"Spring Boot 依赖管理","slug":"spring-boot-依赖管理","link":"#spring-boot-依赖管理","children":[{"level":3,"title":"1. spring-boot-starter-parent依赖","slug":"_1-spring-boot-starter-parent依赖","link":"#_1-spring-boot-starter-parent依赖","children":[]},{"level":3,"title":"2. spring-boot-starter-web依赖","slug":"_2-spring-boot-starter-web依赖","link":"#_2-spring-boot-starter-web依赖","children":[]}]},{"level":2,"title":"Spring Boot 自动配置","slug":"spring-boot-自动配置","link":"#spring-boot-自动配置","children":[{"level":3,"title":"1. @SpringBootConfiguration","slug":"_1-springbootconfiguration","link":"#_1-springbootconfiguration","children":[]},{"level":3,"title":"2. @EnableAutoConfiguration","slug":"_2-enableautoconfiguration","link":"#_2-enableautoconfiguration","children":[]},{"level":3,"title":"3. @ComponentScan","slug":"_3-componentscan","link":"#_3-componentscan","children":[]}]},{"level":2,"title":"Spring Boot执行流程","slug":"spring-boot执行流程","link":"#spring-boot执行流程","children":[]}],"git":{"createdTime":1722936231000,"updatedTime":1725077157000,"contributors":[{"name":"matike16","email":"lda240820@gmail.com","commits":2}]},"readingTime":{"minutes":5.02,"words":1506},"filePathRelative":"technology/backend-dev/后端框架/Spring-Boot原理分析.md","localizedDate":"2024年8月6日","autoDesc":true}');export{m as comp,h as data};
