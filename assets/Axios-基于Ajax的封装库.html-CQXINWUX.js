import{_ as i,o as s,c as a,e as t}from"./app-C-SEdTbB.js";const n={},e=t(`<h2 id="什么是axios" tabindex="-1"><a class="header-anchor" href="#什么是axios"><span>什么是Axios？</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Axios 是一个基于 Promise 的 HTTP 客户端，用于浏览器和 Node.js 环境中。它是一个现代的、基于 Promise 的替代 XMLHttpRequest 的解决方案，使得发起 HTTP 请求变得更加简单和易用。</p></div><p>Axios 的主要特点包括：</p><ol><li><p><strong>基于 Promise</strong>：Axios 使用 Promise 来处理 HTTP 请求，使得异步请求的编写和错误处理更加简洁和易于管理。</p></li><li><p><strong>拦截器</strong>：Axios 支持请求和响应的拦截器，允许你在请求发送之前或响应返回之后执行某些操作，例如添加认证令牌、统一处理错误等。</p></li><li><p><strong>转换请求和响应数据</strong>：Axios 允许你转换发送到服务器的数据和从服务器接收的数据，例如，自动将 JSON 字符串转换为 JavaScript 对象。</p></li><li><p><strong>取消请求</strong>：Axios 支持取消请求的功能，这对于处理依赖于用户行为的请求非常有用。</p></li><li><p><strong>自动转换 JSON 数据</strong>：当发送 POST 请求时，Axios 会自动将 JavaScript 对象转换为 JSON 格式的字符串，并设置请求头 <code>Content-Type</code> 为 <code>application/json</code>。</p></li><li><p><strong>浏览器和 Node.js 兼容</strong>：Axios 可以在浏览器和 Node.js 环境中运行，对于 Node.js 环境，它使用 <code>http</code> 模块来执行 HTTP 请求。</p></li></ol><h2 id="快速入门" tabindex="-1"><a class="header-anchor" href="#快速入门"><span>快速入门</span></a></h2><p>使用 Axios 发起请求的基本示例（请求方式简写版）：</p><ul><li><code>axios.get(url [,config]);</code></li><li><code>axios.delete(url [,config]);</code></li><li><code>axios.post(url [data[,config]]);</code></li><li><code>axios.put(url [data[,config]]);</code></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 引入 Axios</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> axios</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;axios&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 发起 GET 请求</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">axios</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;https://api.example.com/data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">response</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 打印请求返回的数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">error</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;Error during fetch:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 发起 POST 请求</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">axios</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;https://api.example.com/data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    firstName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;John&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    lastName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;Doe&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">response</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">error</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;Error during fetch:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  });</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),l=[e];function h(p,k){return s(),a("div",null,l)}const d=i(n,[["render",h],["__file","Axios-基于Ajax的封装库.html.vue"]]),o=JSON.parse('{"path":"/technology/frontend-dev/%E5%9F%BA%E7%A1%80%E6%8A%80%E6%9C%AF/Axios-%E5%9F%BA%E4%BA%8EAjax%E7%9A%84%E5%B0%81%E8%A3%85%E5%BA%93.html","title":"Axios-基于Ajax的封装库","lang":"zh-CN","frontmatter":{"title":"Axios-基于Ajax的封装库","icon":"code","date":"2024-08-02T00:00:00.000Z","category":"前端基础","tags":["Web开发","Axios"],"order":"5","cover":"/assets/images/Axios-基于Ajax的封装库.jpg","excerpt":"Axios是对原生Ajax程序的一种封装和简化，它主要致力于简化Ajax编程过程，从而加快Web应用的开发速度。","description":"什么是Axios？ 提示 Axios 是一个基于 Promise 的 HTTP 客户端，用于浏览器和 Node.js 环境中。它是一个现代的、基于 Promise 的替代 XMLHttpRequest 的解决方案，使得发起 HTTP 请求变得更加简单和易用。 Axios 的主要特点包括： 基于 Promise：Axios 使用 Promise 来处理 ...","head":[["meta",{"property":"og:url","content":"https://matike16.github.io/dadagarden.github.io/dadagarden.github.io/technology/frontend-dev/%E5%9F%BA%E7%A1%80%E6%8A%80%E6%9C%AF/Axios-%E5%9F%BA%E4%BA%8EAjax%E7%9A%84%E5%B0%81%E8%A3%85%E5%BA%93.html"}],["meta",{"property":"og:site_name","content":"哒哒的花园"}],["meta",{"property":"og:title","content":"Axios-基于Ajax的封装库"}],["meta",{"property":"og:description","content":"什么是Axios？ 提示 Axios 是一个基于 Promise 的 HTTP 客户端，用于浏览器和 Node.js 环境中。它是一个现代的、基于 Promise 的替代 XMLHttpRequest 的解决方案，使得发起 HTTP 请求变得更加简单和易用。 Axios 的主要特点包括： 基于 Promise：Axios 使用 Promise 来处理 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://matike16.github.io/dadagarden.github.io/dadagarden.github.io/assets/images/Axios-基于Ajax的封装库.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-02T15:59:21.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://matike16.github.io/dadagarden.github.io/dadagarden.github.io/assets/images/Axios-基于Ajax的封装库.jpg"}],["meta",{"name":"twitter:image:alt","content":"Axios-基于Ajax的封装库"}],["meta",{"property":"article:author","content":"哒哒溜"}],["meta",{"property":"article:tag","content":"Web开发"}],["meta",{"property":"article:tag","content":"Axios"}],["meta",{"property":"article:published_time","content":"2024-08-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-02T15:59:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Axios-基于Ajax的封装库\\",\\"image\\":[\\"https://matike16.github.io/dadagarden.github.io/dadagarden.github.io/assets/images/Axios-基于Ajax的封装库.jpg\\"],\\"datePublished\\":\\"2024-08-02T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-02T15:59:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"哒哒溜\\",\\"url\\":\\"https://github.com/matike16\\"}]}"]]},"headers":[{"level":2,"title":"什么是Axios？","slug":"什么是axios","link":"#什么是axios","children":[]},{"level":2,"title":"快速入门","slug":"快速入门","link":"#快速入门","children":[]}],"git":{"createdTime":1722614361000,"updatedTime":1722614361000,"contributors":[{"name":"matike16","email":"lda240820@gmail.com","commits":1}]},"readingTime":{"minutes":1.69,"words":506},"filePathRelative":"technology/frontend-dev/基础技术/Axios-基于Ajax的封装库.md","localizedDate":"2024年8月2日","autoDesc":true}');export{d as comp,o as data};
