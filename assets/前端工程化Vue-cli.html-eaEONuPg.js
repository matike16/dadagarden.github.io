import{_ as l,r as a,o as t,c as n,b as p,a as e,e as c}from"./app-C-SEdTbB.js";const o="/dadagarden.github.io/assets/3-B9f88Rxc.jpg",s="/dadagarden.github.io/assets/1-BJ2V158N.png",d="/dadagarden.github.io/assets/2-DzKBqVI0.png",r="/dadagarden.github.io/assets/4-D45VvSik.jpg",u="/dadagarden.github.io/assets/5-D89TYpyx.jpg",h="/dadagarden.github.io/assets/6-MqA0CELl.jpg",g="/dadagarden.github.io/assets/7-BIRJ6OKA.jpg",m={},v=e("div",{class:"hint-container important"},[e("p",{class:"hint-container-title"},"重要"),e("p",null,"现阶段，vite已成为一颗熠熠生辉的新星，未来有成为替代Vue-cli的可能与主流趋势。")],-1),b=e("h2",{id:"资料与文档",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#资料与文档"},[e("span",null,"资料与文档")])],-1),f=c('<h2 id="概要" tabindex="-1"><a class="header-anchor" href="#概要"><span>概要</span></a></h2><p>随着前端开发需求向模块化、组件化、规范化以及自动化方向发展，企业级项目特别重视采用工程化方法以提升开发效率和产品质量。一个有效的手段是利用Vue-cli官方提供的脚手架工具，它能快速生成Vue工程模板，并包含统一的项目目录结构、本地程序调试、热部署、单元测试和集成打包上线等功能。</p><h2 id="什么是前端工程化" tabindex="-1"><a class="header-anchor" href="#什么是前端工程化"><span>什么是前端工程化？</span></a></h2><p>在企业级的前端项目开发中，把前端开发所需要的工具、技术、流程、经验进行规范化和标准化。从而提升开发效率，降低开发难度等等。</p><h3 id="特点" tabindex="-1"><a class="header-anchor" href="#特点"><span>特点</span></a></h3><ul><li>模块化：将js和css等，做成一个个可复用模块</li><li>组件化：将UI组件，css样式，js行为封装成一个个的组件，便于管理</li><li>规范化：提供一套标准的规范的目录接口和编码规范，所有开发人员遵循这套规范</li><li>自动化：项目的构建，测试，部署全部都是自动完成</li></ul><h2 id="前端工程化入门" tabindex="-1"><a class="header-anchor" href="#前端工程化入门"><span>前端工程化入门</span></a></h2><h3 id="环境准备" tabindex="-1"><a class="header-anchor" href="#环境准备"><span>环境准备</span></a></h3><p>Vue-cli特点：</p><ul><li>统一的目录结构</li><li>本地调试</li><li>热部署：热部署功能使得在项目代码更新后无需手动重启服务器就能实时反映在浏览器中。</li><li>单元测试</li><li>集成打包上线</li></ul><p>使用vue3-cli 进行快速开发</p><ol><li><p>搭建vue环境</p><ul><li><p>安装Nodejs</p></li><li><p>全局安装Vue-cli：命令行输入npm install --g vue-cli</p></li></ul></li><li><p>创建项目</p><ul><li><p>vue create 项目名称</p></li><li><p>选择手动配置项目特性 Manually select features</p></li><li><p>空格选择Router、Vuex、Babel、CSS Pre-processors、Linter / Formatter</p></li><li><p>选择3.x</p></li></ul></li></ol><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果选择Vue3进行项目开发的话，最好对TypeScript进行一个了解，TypeScript是一种强类型的JavaScript超集，可以帮助我们在编写代码时避免许多错误，提高代码的可维护性。Vue3官方也推荐使用TS，并且如果要使用到ElementPlus作为组件开发的话，官方也仅提供TS代码示例。</p></div><ul><li><p>使用历史模式</p></li><li><p>使用CSS预处理语言 选择SCSS</p></li><li><p>使用格式化代码方式 选择ESLint + Prettier(此方式格式化严格)</p></li><li><p>选择代码规则检测 Lint on save</p></li><li><p>记录配置选择 保存该次配置为默认配置</p></li><li><p>使用VScode打开 控制台 npm run serve</p></li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>也可以使用图形化创建工具 命令窗口输入：</p><div class="language-cmd line-numbers-mode" data-highlighter="shiki" data-ext="cmd" data-title="cmd" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">vue ui</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></div><h3 id="目录结构" tabindex="-1"><a class="header-anchor" href="#目录结构"><span>目录结构</span></a></h3><p>一图流简化版：</p><figure><img src="'+o+'" alt="一二级目录主要功能和作用" tabindex="0" loading="lazy"><figcaption>一二级目录主要功能和作用</figcaption></figure><h3 id="一级目录结构" tabindex="-1"><a class="header-anchor" href="#一级目录结构"><span>一级目录结构</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>本目录以vue ui创建的默认Vue3基础项目为例，包管理器选择的是默认npm</p></div><ul><li>node_modules</li><li>public</li><li>src</li><li>.gitignore</li><li>.npmrc</li><li>babel.config.js</li><li>jsconfig.json</li><li>package.json</li><li>pnpm-lock.yaml</li><li>README.md</li><li>vue.config.js</li></ul><figure><img src="'+s+'" alt="一级目录" tabindex="0" loading="lazy"><figcaption>一级目录</figcaption></figure><p>下面是每个文件和文件夹的作用：</p><ol><li><code>node_modules</code>：这是一个文件夹，其中包含项目所依赖的所有第三方库和模块。这些依赖项是通过<code>npm</code>或<code>pnpm</code>等包管理器安装的。</li></ol><div class="hint-container tip"><p class="hint-container-title">提示</p><p>一般克隆下来的前端vue项目是不存在node_modules这个文件夹的，因为该文件夹属于忽略项，且内容较大。项目克隆后可以通过<code>npm install</code>等包管理器提供的安装命令进行安装。</p></div><ol start="2"><li><p><code>public</code>：这个文件夹通常包含静态资源文件，如HTML、CSS、JavaScript等，它们在构建过程中不会被Webpack等打包工具处理。</p></li><li><p><code>src</code>：源代码文件夹，包含项目的主要代码，例如Vue组件、JavaScript逻辑、样式文件等。</p></li><li><p><code>.gitignore</code>：这是一个配置文件，用于告诉Git版本控制系统忽略哪些文件或文件夹。例如，<code>node_modules</code>文件夹通常会被添加到这个文件中，以避免将它们上传到Git仓库。</p></li><li><p><code>.npmrc</code>：NPM配置文件，可以设置NPM的配置选项，比如默认的包安装目录等。</p></li><li><p><code>babel.config.js</code>：Babel配置文件，用于定义Babel如何转译JavaScript代码，支持ES6+语法。</p></li><li><p><code>jsconfig.json</code>：用于配置JavaScript项目的设置，比如指定编译器选项、包含的文件等。</p></li><li><p><code>package.json</code>：项目配置文件，列出了项目的依赖项、脚本命令、版本号等信息。它是<code>npm</code>或<code>pnpm</code>管理依赖和执行脚本的基础。</p></li><li><p><code>pnpm-lock.yaml</code>：这是<code>pnpm</code>的锁定文件，记录了项目依赖的确切版本，确保在不同环境之间保持一致性。</p></li><li><p><code>README.md</code>：Markdown格式的说明文件，通常包含项目的介绍、如何安装和使用等信息。</p></li><li><p><code>vue.config.js</code>：Vue CLI的配置文件，用于自定义Vue项目的构建和开发选项。</p></li></ol><div class="hint-container tip"><p class="hint-container-title">提示</p><p>dist目录也是位于一级目录中的，一开始并不存在，一般是项目构建（build）之后创建。</p></div><h3 id="二级目录结构" tabindex="-1"><a class="header-anchor" href="#二级目录结构"><span>二级目录结构</span></a></h3><h4 id="node-modules" tabindex="-1"><a class="header-anchor" href="#node-modules"><span>node_modules</span></a></h4><p>关于node_modules文件夹中的内容就不做过多的介绍了，此处包含的都是通过包管理器安装过来的一些依赖文件，编写代码时我们也不会碰里面的文件。</p><ul><li><p>引入对应的依赖时记得使用包管理器安装命令例如<code>npm install</code></p></li><li><p>包管理器会自动根据package.json中的依赖信息下载对应的依赖到node_modules中</p></li></ul><h4 id="public" tabindex="-1"><a class="header-anchor" href="#public"><span>public</span></a></h4><figure><img src="'+d+'" alt="public二级目录" tabindex="0" loading="lazy"><figcaption>public二级目录</figcaption></figure><p>公有资源的存放路径，一般以存储静态资源为主，包括网站的lfavicon.ico等文件。同时还包括了项目的主入口<code>index.html</code></p><p>后续打包构建项目过程中，public中的文件会直接并入dist文件夹中</p><h4 id="src" tabindex="-1"><a class="header-anchor" href="#src"><span>src</span></a></h4><p>src是我们的源代码文件夹，包含：</p><ul><li>assets</li><li>components</li><li>App.vue</li><li>main.js</li></ul><p>下面是每个文件和文件夹的作用：</p><ol><li><p><code>assets</code>：用于存放项目中的静态资源，如图片、样式表、JavaScript文件等。</p></li><li><p><code>components</code>：用于存放Vue组件。在Vue中，组件是可复用的代码块，可以包含HTML、JavaScript和CSS。</p></li><li><p><code>App.vue</code>：这是Vue应用程序的根组件文件。它定义了整个应用的初始布局和逻辑。</p></li><li><p><code>main.js</code>：这是Vue应用程序的入口文件，用于创建Vue实例并挂载到DOM元素上。它通常会导入Vue、App.vue组件以及其它必要的库或插件。</p></li></ol><h3 id="运行vue项目" tabindex="-1"><a class="header-anchor" href="#运行vue项目"><span>运行Vue项目</span></a></h3><ul><li>运行方式1：通过VSCode图形化界面运行。</li><li>在设置中搜索npm，打开自动检测npm脚本：</li></ul><figure><img src="'+r+'" alt="开启自动检测npm脚本" tabindex="0" loading="lazy"><figcaption>开启自动检测npm脚本</figcaption></figure><ul><li>在项目左上角资源管理器处勾选npm脚本：</li></ul><figure><img src="'+u+'" alt="勾选脚本" tabindex="0" loading="lazy"><figcaption>勾选脚本</figcaption></figure><ul><li>此时就可以在Vue项目的资源管理器的左下角看到npm脚本了</li></ul><figure><img src="'+h+'" alt="npm脚本" tabindex="0" loading="lazy"><figcaption>npm脚本</figcaption></figure><div class="hint-container tip"><p class="hint-container-title">提示</p><p>图形化的界面可以提高我们的开发效率，减少不必要的重复指令输入指令时间。</p></div><ul><li>接着点击serve旁边的运行按钮就可以自动执行Vue项目的部署了。</li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>Vue 项目运行前记得安装依赖，执行<code>npm install</code>等包管理器命令。</p></div><ul><li>默认端口在8080</li></ul><figure><img src="'+g+'" alt="运行截图" tabindex="0" loading="lazy"><figcaption>运行截图</figcaption></figure><h2 id="简述初始化vue项目的原理" tabindex="-1"><a class="header-anchor" href="#简述初始化vue项目的原理"><span>简述初始化Vue项目的原理</span></a></h2><ul><li><p>在入口文件main.js中，首先引入了Vue和根组件App.vue</p></li><li><p>然后使用了Vue Router插件</p></li><li><p>接着创建Vue实例，并挂载到DOM中。</p></li><li><p>App.vue是应用的根组件，包含模板、脚本和样式三个部分</p><ul><li>模板（template）：定义页面结构，包含HTML标签</li><li>脚本（script）：定义组件数据、方法和生命周期钩子等</li><li>样式（style）：定义组件css样式</li></ul></li></ul>',54);function V(_,k){const i=a("NavCard");return t(),n("div",null,[v,b,p(i,{arr:`[
    {"title": "Vue-cli文档", "url": "https://cli.vuejs.org/zh/guide/creating-a-project.html", "desc": "🛠️ Vue.js 开发的标准工具", "icon": "/navicon/vuepress.png"}
]`}),f])}const x=l(m,[["render",V],["__file","前端工程化Vue-cli.html.vue"]]),j=JSON.parse('{"path":"/technology/frontend-dev/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96Vue-cli.html","title":"前端工程化Vue-cli","lang":"zh-CN","frontmatter":{"title":"前端工程化Vue-cli","icon":"code","date":"2024-08-03T00:00:00.000Z","category":"前端基础","tags":["Web开发","前端工程化","Vue-cli"],"order":"2","cover":"/assets/images/前端工程化 Vue-cli.jpg","excerpt":"随着前端开发需求向模块化、组件化、规范化以及自动化方向发展，企业级项目特别重视采用工程化方法以提升开发效率和产品质量。一个有效的手段是利用Vue-cli官方提供的脚手架工具，它能快速生成Vue工程模板，并包含统一的项目目录结构、本地程序调试、热部署、单元测试和集成打包上线等功能。","description":"重要 现阶段，vite已成为一颗熠熠生辉的新星，未来有成为替代Vue-cli的可能与主流趋势。 资料与文档 概要 随着前端开发需求向模块化、组件化、规范化以及自动化方向发展，企业级项目特别重视采用工程化方法以提升开发效率和产品质量。一个有效的手段是利用Vue-cli官方提供的脚手架工具，它能快速生成Vue工程模板，并包含统一的项目目录结构、本地程序调试...","head":[["meta",{"property":"og:url","content":"https://matike16.github.io/dadagarden.github.io/dadagarden.github.io/technology/frontend-dev/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96Vue-cli.html"}],["meta",{"property":"og:site_name","content":"哒哒的花园"}],["meta",{"property":"og:title","content":"前端工程化Vue-cli"}],["meta",{"property":"og:description","content":"重要 现阶段，vite已成为一颗熠熠生辉的新星，未来有成为替代Vue-cli的可能与主流趋势。 资料与文档 概要 随着前端开发需求向模块化、组件化、规范化以及自动化方向发展，企业级项目特别重视采用工程化方法以提升开发效率和产品质量。一个有效的手段是利用Vue-cli官方提供的脚手架工具，它能快速生成Vue工程模板，并包含统一的项目目录结构、本地程序调试..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://matike16.github.io/dadagarden.github.io/dadagarden.github.io/assets/images/前端工程化 Vue-cli.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-11T00:37:20.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://matike16.github.io/dadagarden.github.io/dadagarden.github.io/assets/images/前端工程化 Vue-cli.jpg"}],["meta",{"name":"twitter:image:alt","content":"前端工程化Vue-cli"}],["meta",{"property":"article:author","content":"哒哒溜"}],["meta",{"property":"article:tag","content":"Web开发"}],["meta",{"property":"article:tag","content":"前端工程化"}],["meta",{"property":"article:tag","content":"Vue-cli"}],["meta",{"property":"article:published_time","content":"2024-08-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-11T00:37:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"前端工程化Vue-cli\\",\\"image\\":[\\"https://matike16.github.io/dadagarden.github.io/dadagarden.github.io/assets/images/前端工程化 Vue-cli.jpg\\"],\\"datePublished\\":\\"2024-08-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-10-11T00:37:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"哒哒溜\\",\\"url\\":\\"https://github.com/matike16\\"}]}"]]},"headers":[{"level":2,"title":"资料与文档","slug":"资料与文档","link":"#资料与文档","children":[]},{"level":2,"title":"概要","slug":"概要","link":"#概要","children":[]},{"level":2,"title":"什么是前端工程化？","slug":"什么是前端工程化","link":"#什么是前端工程化","children":[{"level":3,"title":"特点","slug":"特点","link":"#特点","children":[]}]},{"level":2,"title":"前端工程化入门","slug":"前端工程化入门","link":"#前端工程化入门","children":[{"level":3,"title":"环境准备","slug":"环境准备","link":"#环境准备","children":[]},{"level":3,"title":"目录结构","slug":"目录结构","link":"#目录结构","children":[]},{"level":3,"title":"一级目录结构","slug":"一级目录结构","link":"#一级目录结构","children":[]},{"level":3,"title":"二级目录结构","slug":"二级目录结构","link":"#二级目录结构","children":[]},{"level":3,"title":"运行Vue项目","slug":"运行vue项目","link":"#运行vue项目","children":[]}]},{"level":2,"title":"简述初始化Vue项目的原理","slug":"简述初始化vue项目的原理","link":"#简述初始化vue项目的原理","children":[]}],"git":{"createdTime":1722781247000,"updatedTime":1728607040000,"contributors":[{"name":"matike16","email":"lda240820@gmail.com","commits":3}]},"readingTime":{"minutes":7.2,"words":2161},"filePathRelative":"technology/frontend-dev/前端框架/前端工程化Vue-cli.md","localizedDate":"2024年8月3日","autoDesc":true}');export{x as comp,j as data};
