import{_ as i,o as a,c as s,e as t}from"./app-VZalTjo3.js";const e="/dadagarden.github.io/assets/1-BjDssPS2.png",n="/dadagarden.github.io/assets/2-2Gr_Yk5o.png",l="/dadagarden.github.io/assets/3-B2k91LH0.png",r="/dadagarden.github.io/assets/4-DZKSff8g.png",g="/dadagarden.github.io/assets/5-B18_ZAdw.png",p="/dadagarden.github.io/assets/15-DOGMWjO-.png",d="/dadagarden.github.io/assets/16-CtoN9Pzk.png",h="/dadagarden.github.io/assets/6-s4oUiVC6.png",o="/dadagarden.github.io/assets/7-CucG9ari.png",c="/dadagarden.github.io/assets/8-Dv0CChWk.png",u="/dadagarden.github.io/assets/9-COrAKL2E.png",k="/dadagarden.github.io/assets/10-BnLvXQIJ.png",b="/dadagarden.github.io/assets/11-BxY-TQ2g.png",m="/dadagarden.github.io/assets/12-IjzLL0wE.png",f="/dadagarden.github.io/assets/13-CbbrDrPd.png",B="/dadagarden.github.io/assets/14-B1LNpC5l.png",y={},v=t('<div class="hint-container note"><p class="hint-container-title">注</p><p>本篇文章将讲解如何将项目部署到Github Pages中，以实现博客的访问。对于样式以及配置的修改和二次开发将在稍后的文章中提及。</p></div><h2 id="什么是github-pages" tabindex="-1"><a class="header-anchor" href="#什么是github-pages"><span>什么是Github Pages？</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>GitHub Pages 是一个免费的静态网站托管服务，它允许用户直接从 GitHub 仓库托管静态网站。</p></div><h3 id="特点" tabindex="-1"><a class="header-anchor" href="#特点"><span>特点</span></a></h3><ul><li><mark>免费</mark>托管</li><li>只支持<mark>静态</mark>内容</li><li>可自定义域名</li><li>优秀的版本控制</li><li><mark>自动化</mark>部署</li><li>预设主题与模板</li><li>良好的访问速度（国内易受审查和DNS域名污染影响，推荐使用代理或加速器访问）</li><li>基本的安全防护</li><li>优秀的社区支持</li></ul><h3 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h3><ul><li>个人或者组织的博客</li><li>项目文档和手册</li><li>作品集或者简历</li><li>小型网站或者着陆页</li></ul><div class="hint-container tip"><p class="hint-container-title">为什么不使用Gitee Pages?</p><ul><li>至本篇文章截稿，Gitee Pages服务仍在暂停中。</li><li>Gitee有着严格的审查制度，部分文章无法通过。</li></ul><blockquote><p>但是Gitee Pages大大提高了国内的可访问性</p></blockquote></div><h2 id="部署" tabindex="-1"><a class="header-anchor" href="#部署"><span>部署</span></a></h2><blockquote><p>接下来让我们部署项目到Github Pages 中吧！</p></blockquote><h3 id="_1-新建仓库" tabindex="-1"><a class="header-anchor" href="#_1-新建仓库"><span>1. 新建仓库</span></a></h3><ul><li>在Github个人首页点击右上角+号选择<mark>New repository</mark></li></ul><figure><img src="'+e+'" alt="新建仓库" tabindex="0" loading="lazy"><figcaption>新建仓库</figcaption></figure><ul><li>给仓库添加名称与描述</li></ul><div class="hint-container important"><p class="hint-container-title">重要</p><p>注意名称必须以.github.io结尾，这样Github就会将你的仓库部署到<code>https://username.github.io</code>这个子域名上，其中username是你的Github用户名。这个命名方式是必须的。</p></div><figure><img src="'+n+'" alt="添加名称与描述" tabindex="0" loading="lazy"><figcaption>添加名称与描述</figcaption></figure><ul><li>仓库类型默认公共(Public)即可</li></ul><figure><img src="'+l+'" alt="选择公共创建成功" tabindex="0" loading="lazy"><figcaption>选择公共创建成功</figcaption></figure><h3 id="_2-配置工作流权限" tabindex="-1"><a class="header-anchor" href="#_2-配置工作流权限"><span>2. 配置工作流权限</span></a></h3><div class="hint-container important"><p class="hint-container-title">重要</p><p>在<a href="./%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8">快速入门</a>中我们已经确认选择了部署到Github Pages工作流，所以项目会自动为我们在.github/workflows文件夹中创建一个名为<code>deploy-docs</code>的yml文件，如果没有此文件请手动创建。</p></div><ul><li>在项目仓库中依次打开Setting -&gt; Actions -&gt; General：</li></ul><figure><img src="'+r+'" alt="选择General" tabindex="0" loading="lazy"><figcaption>选择General</figcaption></figure><ul><li>下拉在Workflow permissions中修改权限为&quot;Read and write permissions&quot;：</li></ul><figure><img src="'+g+'" alt="修改权限" tabindex="0" loading="lazy"><figcaption>修改权限</figcaption></figure><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在 GitHub Actions 中，&quot;Workflow permissions&quot;（工作流权限）是指定义工作流在运行时对仓库资源的访问权限。这些权限可以控制工作流能够读取或修改仓库中的哪些数据。以下是对不同权限的解释：</p></div><ol><li><p><strong>Read and write permissions</strong>（读写权限）:</p><ul><li>选择此选项时，工作流将获得对仓库所有范围的读写权限。这意味着工作流可以读取仓库中的所有内容，并且可以执行写操作，比如修改文件、创建或编辑 issue、合并 pull request 等。</li></ul></li><li><p><strong>Read repository contents and packages permissions</strong>（读取仓库内容和包权限）:</p><ul><li>如果选择这个选项，工作流只有读取仓库内容和包的权限。这意味着工作流可以读取仓库中的文件和包，但不允许执行写操作，比如不能推送代码、创建或合并 pull request。</li></ul></li><li><p><strong>Allow GitHub Actions to create and approve pull requests</strong>（允许 GitHub Actions 创建和批准 pull requests）:</p><ul><li>这个选项允许工作流创建 pull request，并且可以提交批准（approve）pull request 的 review。这通常用于自动化测试和持续集成流程，其中代码提交后，自动化脚本可以运行测试，如果测试通过，则自动批准 pull request。</li></ul></li></ol><div class="hint-container important"><p class="hint-container-title">重要</p><p>在设置工作流权限时，始终建议遵循最小权限原则，即只为工作流提供完成其任务所必需的权限，以减少潜在的安全风险。</p></div><h3 id="_3-修改base" tabindex="-1"><a class="header-anchor" href="#_3-修改base"><span>3. 修改base</span></a></h3><div class="hint-container important"><p class="hint-container-title">重要</p><p>base如果配置不正确会导致css样式丢失</p></div><ul><li>接着我们来到本地项目文件夹，依次点击：</li><li>src -&gt; .vuepress -&gt; config.ts</li><li>使用编辑器VSCode打开config.ts，修改base为你在Github中创建的仓库名称：<code>/test.github.io/</code></li></ul><figure><img src="'+p+'" alt="打开config.ts" tabindex="0" loading="lazy"><figcaption>打开config.ts</figcaption></figure><figure><img src="'+d+'" alt="修改base" tabindex="0" loading="lazy"><figcaption>修改base</figcaption></figure><h3 id="_4-推送项目到github仓库" tabindex="-1"><a class="header-anchor" href="#_4-推送项目到github仓库"><span>4. 推送项目到Github仓库</span></a></h3><ul><li>接着在文件资源管理器中打开我们的项目文件夹，在地址栏输入cmd并回车：</li></ul><figure><img src="'+h+`" alt="输入cmd并回车" tabindex="0" loading="lazy"><figcaption>输入cmd并回车</figcaption></figure><ul><li>依次在终端中输入以下命令：</li></ul><div class="language-cmd line-numbers-mode" data-highlighter="shiki" data-ext="cmd" data-title="cmd" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"># 如果运行过此命令，就不需要重复执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">git init</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"># 注意add之后有一个空格 . 代表全部</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">git </span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"># 添加提交信息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">git </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">commit</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">m</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;first commit&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">git </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">branch</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">M</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"># 注意修改为自己的仓库</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">git remote </span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> origin https://github.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">com</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">matike16</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">/test.github.io.git</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"># 推送</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">git </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">push</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">u</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> origin main</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>以上命令在Github创建仓库的Code首页均有提供：</li></ul><figure><img src="`+o+'" alt="输入命令" tabindex="0" loading="lazy"><figcaption>输入命令</figcaption></figure><ul><li>推送成功</li></ul><figure><img src="'+c+'" alt="推送成功" tabindex="0" loading="lazy"><figcaption>推送成功</figcaption></figure><ul><li>此时刷新Github仓库地址就可以看到项目代码了。</li></ul><h3 id="_5-查看action并处理报错" tabindex="-1"><a class="header-anchor" href="#_5-查看action并处理报错"><span>5. 查看Action并处理报错</span></a></h3><ul><li>接着我们点击项目导航栏中的Action，查看项目的部署情况： <ul><li>如果在 commit 前面显示绿色对勾则代表成功！</li></ul></li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>此处可能存在以下报错：</p><figure><img src="'+u+'" alt="出现多个pnpm版本" tabindex="0" loading="lazy"><figcaption>出现多个pnpm版本</figcaption></figure><ul><li>此时我们打开本地文件资源管理器，找到项目中的./github/workflows文件夹中的<code>deploy-docs</code>文件打开，删除以下内容：</li></ul><figure><img src="'+k+`" alt="删除条目" tabindex="0" loading="lazy"><figcaption>删除条目</figcaption></figure><ul><li>回到终端再依次运行以下命令：</li></ul><div class="language-cmd line-numbers-mode" data-highlighter="shiki" data-ext="cmd" data-title="cmd" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">git </span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> .</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">git </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">commit</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">m</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;修改pnpm版本错误&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">git </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">push</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">u</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> origin main</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>此时重新回到Github查看，选择Actions：</li></ul><figure><img src="`+b+'" alt="workflow-runs成功" tabindex="0" loading="lazy"><figcaption>workflow-runs成功</figcaption></figure></div><h3 id="_6-部署pages" tabindex="-1"><a class="header-anchor" href="#_6-部署pages"><span>6. 部署Pages</span></a></h3><ul><li>接着在Github项目仓库中依次点击：</li><li>Settings -&gt; Pages -&gt; 选择gh-pages -&gt; 点击Save</li></ul><figure><img src="'+m+'" alt="部署Pages" tabindex="0" loading="lazy"><figcaption>部署Pages</figcaption></figure><ul><li>最后再次点击导航栏的Actions，会发现多了一个条目<code>pages-build-deployment</code>，单击它</li></ul><figure><img src="'+f+'" alt="pages-build-deployment" tabindex="0" loading="lazy"><figcaption>pages-build-deployment</figcaption></figure><ul><li>最后点击网址查看，此时你的项目博客就已经成功部署到了Github Pages中了，你可以随时随地访问了。</li></ul><figure><img src="'+B+'" alt="单击网址查看部署好的网站" tabindex="0" loading="lazy"><figcaption>单击网址查看部署好的网站</figcaption></figure>',52),_=[v];function E(G,A){return a(),s("div",null,_)}const C=i(y,[["render",E],["__file","Pages部署.html.vue"]]),x=JSON.parse('{"path":"/about/blog-building/Pages%E9%83%A8%E7%BD%B2.html","title":"Github Pages部署","lang":"zh-CN","frontmatter":{"title":"Github Pages部署","icon":"gears","date":"2024-07-20T00:00:00.000Z","category":"博客搭建","tags":["Github-Pages"],"order":"3","cover":"/assets/images/GithubPages部署.jpg","excerpt":"本篇文章将介绍如何将个人或组织的博客项目部署到GitHub Pages上，包括创建仓库、配置工作流权限、修改配置文件、推送代码、处理部署错误以及完成部署的详细步骤。","description":"注 本篇文章将讲解如何将项目部署到Github Pages中，以实现博客的访问。对于样式以及配置的修改和二次开发将在稍后的文章中提及。 什么是Github Pages？ 提示 GitHub Pages 是一个免费的静态网站托管服务，它允许用户直接从 GitHub 仓库托管静态网站。 特点 免费托管 只支持静态内容 可自定义域名 优秀的版本控制 自动化部...","head":[["meta",{"property":"og:url","content":"https://matike16.github.io/dadagarden.github.io/dadagarden.github.io/about/blog-building/Pages%E9%83%A8%E7%BD%B2.html"}],["meta",{"property":"og:site_name","content":"哒哒的花园"}],["meta",{"property":"og:title","content":"Github Pages部署"}],["meta",{"property":"og:description","content":"注 本篇文章将讲解如何将项目部署到Github Pages中，以实现博客的访问。对于样式以及配置的修改和二次开发将在稍后的文章中提及。 什么是Github Pages？ 提示 GitHub Pages 是一个免费的静态网站托管服务，它允许用户直接从 GitHub 仓库托管静态网站。 特点 免费托管 只支持静态内容 可自定义域名 优秀的版本控制 自动化部..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://matike16.github.io/dadagarden.github.io/dadagarden.github.io/assets/images/GithubPages部署.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-28T04:05:15.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://matike16.github.io/dadagarden.github.io/dadagarden.github.io/assets/images/GithubPages部署.jpg"}],["meta",{"name":"twitter:image:alt","content":"Github Pages部署"}],["meta",{"property":"article:author","content":"哒哒溜"}],["meta",{"property":"article:tag","content":"Github-Pages"}],["meta",{"property":"article:published_time","content":"2024-07-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-28T04:05:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Github Pages部署\\",\\"image\\":[\\"https://matike16.github.io/dadagarden.github.io/dadagarden.github.io/assets/images/GithubPages部署.jpg\\"],\\"datePublished\\":\\"2024-07-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-28T04:05:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"哒哒溜\\",\\"url\\":\\"https://github.com/matike16\\"}]}"]]},"headers":[{"level":2,"title":"什么是Github Pages？","slug":"什么是github-pages","link":"#什么是github-pages","children":[{"level":3,"title":"特点","slug":"特点","link":"#特点","children":[]},{"level":3,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]}]},{"level":2,"title":"部署","slug":"部署","link":"#部署","children":[{"level":3,"title":"1. 新建仓库","slug":"_1-新建仓库","link":"#_1-新建仓库","children":[]},{"level":3,"title":"2. 配置工作流权限","slug":"_2-配置工作流权限","link":"#_2-配置工作流权限","children":[]},{"level":3,"title":"3. 修改base","slug":"_3-修改base","link":"#_3-修改base","children":[]},{"level":3,"title":"4. 推送项目到Github仓库","slug":"_4-推送项目到github仓库","link":"#_4-推送项目到github仓库","children":[]},{"level":3,"title":"5. 查看Action并处理报错","slug":"_5-查看action并处理报错","link":"#_5-查看action并处理报错","children":[]},{"level":3,"title":"6. 部署Pages","slug":"_6-部署pages","link":"#_6-部署pages","children":[]}]}],"git":{"createdTime":1721491881000,"updatedTime":1722139515000,"contributors":[{"name":"matike16","email":"lda240820@gmail.com","commits":4}]},"readingTime":{"minutes":5.23,"words":1570},"filePathRelative":"about/blog-building/Pages部署.md","localizedDate":"2024年7月20日","autoDesc":true}');export{C as comp,x as data};
